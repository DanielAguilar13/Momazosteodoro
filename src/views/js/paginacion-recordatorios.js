document.addEventListener('DOMContentLoaded', function() {
    const recordsPerPage = 8;  // N√∫mero de elementos por p√°gina
    let currentPage = 1;  // P√°gina actual
    let totalPages = 0;  // Total de p√°ginas
    let allRecords = [];  // Almacenar√° todos los recordatorios

    // Funci√≥n para cargar los recordatorios
    fetch('/recordatorios')
        .then(response => {
            if (!response.ok) {
                throw new Error('Error al obtener los datos: ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            allRecords = data;  // Guardamos los recordatorios
            totalPages = Math.ceil(allRecords.length / recordsPerPage);  // Calculamos el total de p√°ginas
            renderPagination();  // Renderizamos los botones de paginaci√≥n
            renderTable();  // Renderizamos la primera p√°gina de la tabla
        })
        .catch(error => console.error('Error al obtener los datos:', error));

    // Funci√≥n para mostrar la tabla con los recordatorios
    function renderTable() {
        const start = (currentPage - 1) * recordsPerPage;
        const end = start + recordsPerPage;
        const pageRecords = allRecords.slice(start, end);  // Filtramos los recordatorios para la p√°gina actual

        const tabla = document.getElementById('tabla-datos');
        tabla.innerHTML = '';  // Limpiamos la tabla antes de agregar los nuevos datos

        pageRecords.forEach(item => {
            const fecha = new Date(item.fecha);
            const fechaFormateada = `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear()}`;           
            const fila = document.createElement('tr');
            fila.innerHTML = `
                <td>${item.concepto}</td>
                <td>${item.id_categoria}</td>
                <td>${fechaFormateada}</td>
                <td class="actions">
                    <button class="btn btn-edit" onclick="editarRecordatorio(${item.id})">‚úèÔ∏è</button>
                    <button class="btn btn-delete" onclick="eliminarRecordatorio(${item.id})">üóëÔ∏è</button>
                </td>
            `;
            tabla.appendChild(fila);
        });
    }

    // Funci√≥n para actualizar los botones de paginaci√≥n
    function renderPagination() {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';  // Limpiamos la paginaci√≥n

        // Bot√≥n anterior
        const prevButton = document.createElement('button');
        prevButton.classList.add('prev');
        prevButton.innerText = '¬´';
        prevButton.disabled = currentPage === 1;  // Deshabilitamos si estamos en la primera p√°gina
        prevButton.addEventListener('click', () => changePage(currentPage - 1));
        pagination.appendChild(prevButton);

        // Generar botones para cada p√°gina
        const pageButtons = generatePageButtons(totalPages);
        pageButtons.forEach(button => {
            pagination.appendChild(button);
        });

        // Bot√≥n siguiente
        const nextButton = document.createElement('button');
        nextButton.classList.add('next');
        nextButton.innerText = '¬ª';
        nextButton.disabled = currentPage === totalPages;  // Deshabilitamos si estamos en la √∫ltima p√°gina
        nextButton.addEventListener('click', () => changePage(currentPage + 1));
        pagination.appendChild(nextButton);
    }

    // Funci√≥n para generar los botones de las p√°ginas
    function generatePageButtons(totalPages) {
        const buttons = [];
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.classList.add('page');
            pageButton.innerText = i;
            pageButton.setAttribute('data-page', i);
            pageButton.addEventListener('click', () => changePage(i));
            if (i === currentPage) {
                pageButton.classList.add('active');  // Resaltamos la p√°gina actual
            }
            buttons.push(pageButton);
        }
        return buttons;
    }

    // Funci√≥n para cambiar de p√°gina
    function changePage(page) {
        if (page < 1 || page > totalPages) return;  // Validamos que la p√°gina est√© dentro del rango
        currentPage = page;  // Actualizamos la p√°gina actual
        renderTable();  // Renderizamos la tabla
        renderPagination();  // Actualizamos los botones de paginaci√≥n
    }
});
